<?php
/**
 * 【 算术运算符 】
 */
// + - * / % ++ --
// 算术运算符的运算结果，一定是数值型
// 类型转换：如果两边的操作数不是数值型，要先转成数值型，再进行算术运算
$a = 20;
$b = 3;
$c = $a / $b; // 6.6666666666667
$d = 9.8 % 3; // 0 取模操作，操作数非整型转整型
$e = 10 % -3; // 1 结果的符号与被除数有关
$f = -10 % 3; // -1 结果的符号与被除数有关
$g = -10 % -3; // -1 结果的符号与被除数有关

/**
 * 【 赋值运算符 】
 */
// = += -= *= /= %=

/**
 * 【 比较运算符 】
 */
// > < >= <= == != === !==
// 运算结果，一定是布尔值
// 字符串比较，两个ASCII字符串相比，按每个字符的ASCII值，进行大小比较(ASCII字符集：a-z、A-Z、0-9、标点符号)
var_dump("Bao" > "ao"); // bool(false)

/**
 * 【 字符串运算符 】
 */
// . .=

/**
 * 【 逻辑运算符 】
 */
// && || !

/**
 * 【 条件(三元)运算符 】
 */
// ?:

/**
 * 【 错误控制运算符(@) 】
 */
// "@" 主要用来屏蔽表达式的系统错误
// 可以用来屏蔽常量、变量、函数调用、include语句
$link = @mysql_connect("localhost","root","123456");

/**
 * 【 运算符优先级 】 高 >> 低
 */
/*
特殊运算符  >  算术运算符  >  比较运算符  >  逻辑运算符  >  赋值运算符
clone new [] ()
! ++ -- (int) (float) (string) (bool) (array) @
* / %
+ - .
> < >= <=
== != === !==
&& || ?:
= += -= *= /= %=
,
*/

